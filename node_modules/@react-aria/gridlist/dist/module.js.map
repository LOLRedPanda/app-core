{"mappings":";;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;CAUC,GAED;ACZA;;;;;;;;;;CAUC,GAED,AAUO,MAAM,4CAAU,IAAI;AAEpB,SAAS,0CAAY,KAAmB,EAAE,GAAQ,EAAE;IACzD,IAAI,MAAC,GAAE,EAAC,GAAG,0CAAQ,GAAG,CAAC;IACvB,IAAI,CAAC,IACH,MAAM,IAAI,MAAM,gBAAgB;IAGlC,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,0CAAa,KAAK,CAAC;AACrC;AAEO,SAAS,0CAAa,GAAQ,EAAU;IAC7C,IAAI,OAAO,QAAQ,UACjB,OAAO,IAAI,OAAO,CAAC,QAAQ;IAG7B,OAAO,KAAK;AACd;;;;;ADuBO,SAAS,0CAAe,KAA6B,EAAE,KAAmB,EAAE,GAA2B,EAAgB;IAC5H,IAAI,iBACF,cAAa,oBACb,iBAAgB,YAChB,SAAQ,EACT,GAAG;IAEJ,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,KAAK,CAAC,kBAAkB,EACnD,QAAQ,IAAI,CAAC;IAGf,IAAI,aAAC,UAAS,EAAC,GAAG,CAAA,GAAA,wBAAiB,AAAD,EAAE;QAClC,kBAAkB,MAAM,gBAAgB;QACxC,YAAY,MAAM,UAAU;QAC5B,cAAc,MAAM,YAAY;aAChC;QACA,kBAAkB;uBAClB;QACA,eAAe,MAAM,gBAAgB,CAAC,iBAAiB,KAAK;IAC9D;IAEA,IAAI,KAAK,CAAA,GAAA,YAAK,AAAD;IACb,CAAA,GAAA,yCAAM,EAAE,GAAG,CAAC,OAAO;YAAC;kBAAI;IAAQ;IAEhC,IAAI,mBAAmB,CAAA,GAAA,uCAA+B,EAAE;QACtD,kBAAkB,MAAM,gBAAgB;QACxC,gBAAgB,CAAC,CAAC;IACpB;IAEA,IAAI,WAAW,CAAA,GAAA,qBAAa,EAAE,OAAO;QAAC,WAAW,IAAI;IAAA;IACrD,IAAI,YAA2B,CAAA,GAAA,iBAAS,EACtC,UACA;QACE,MAAM;YACN;QACA,wBAAwB,MAAM,gBAAgB,CAAC,aAAa,KAAK,aAAa,SAAS,SAAS;IAClG,GACA,MAAM,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,SAAS,EAC5C;IAGF,IAAI,eAAe;QACjB,SAAS,CAAC,gBAAgB,GAAG,MAAM,UAAU,CAAC,IAAI;QAClD,SAAS,CAAC,gBAAgB,GAAG;IAC/B,CAAC;IAED,CAAA,GAAA,mCAA2B,EAAE,CAAC,GAAG;IAEjC,OAAO;mBACL;IACF;AACF;;CDvGC,GAED;AGZA;;;;;;;;;;CAUC,GAED;;;;;;AAkCO,SAAS,0CAAmB,KAA8B,EAAE,KAAmB,EAAE,GAAgC,EAAoB;IAC1I,+EAA+E;IAC/E,IAAI,QACF,KAAI,iBACJ,cAAa,yBACb,sBAAqB,EACtB,GAAG;IAEJ,IAAI,aAAC,UAAS,EAAC,GAAG,CAAA,GAAA,gBAAS,AAAD;IAC1B,IAAI,YAAC,SAAQ,EAAC,GAAG,CAAA,GAAA,yCAAO,AAAD,EAAE,GAAG,CAAC;IAC7B,IAAI,gBAAgB,CAAA,GAAA,gBAAS,AAAD;IAC5B,IAAI,QAAQ,IAAM;QAChB,yFAAyF;QACzF,kCAAkC;QAClC,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,aAAa,GAC9C,CAAA,GAAA,kBAAU,EAAE,IAAI,OAAO;IAE3B;IAEA,IAAI,aAAC,UAAS,EAAE,GAAG,YAAW,GAAG,CAAA,GAAA,wBAAiB,AAAD,EAAE;QACjD,kBAAkB,MAAM,gBAAgB;QACxC,KAAK,KAAK,GAAG;aACb;uBACA;+BACA;QACA,UAAU,WAAW,IAAM,SAAS,KAAK,GAAG,IAAI,SAAS;eACzD;IACF;IAEA,IAAI,YAAY,CAAC,IAA0B;QACzC,IAAI,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,EAAE,MAAM,GACpC;QAGF,IAAI,SAAS,CAAA,GAAA,6BAAsB,AAAD,EAAE,IAAI,OAAO;QAC/C,OAAO,WAAW,GAAG,SAAS,aAAa;QAE3C,OAAQ,EAAE,GAAG;YACX,KAAK;gBAAa;oBAChB,kDAAkD;oBAClD,IAAI,YAAY,cAAc,QAC1B,OAAO,QAAQ,KACf,OAAO,YAAY,EAAsB;oBAE7C,IAAI,WAAW;wBACb,EAAE,cAAc;wBAChB,EAAE,eAAe;wBACjB,CAAA,GAAA,kBAAW,AAAD,EAAE;oBACd,OAAO;wBACL,yEAAyE;wBACzE,EAAE,cAAc;wBAChB,EAAE,eAAe;wBACjB,IAAI,cAAc,OAChB,CAAA,GAAA,kBAAU,EAAE,IAAI,OAAO;6BAClB;4BACL,OAAO,WAAW,GAAG,IAAI,OAAO;4BAChC,IAAI,cAAc,2BAAK;4BACvB,IAAI,aACF,CAAA,GAAA,kBAAU,EAAE;wBAEhB,CAAC;oBACH,CAAC;oBACD,KAAM;gBACR;YACA,KAAK;gBAAc;oBACjB,IAAI,aAAY,cAAc,QAC1B,OAAO,YAAY,KACnB,OAAO,QAAQ,EAAsB;oBAEzC,IAAI,YAAW;wBACb,EAAE,cAAc;wBAChB,EAAE,eAAe;wBACjB,CAAA,GAAA,kBAAW,AAAD,EAAE;oBACd,OAAO;wBACL,EAAE,cAAc;wBAChB,EAAE,eAAe;wBACjB,IAAI,cAAc,OAChB,CAAA,GAAA,kBAAU,EAAE,IAAI,OAAO;6BAClB;4BACL,OAAO,WAAW,GAAG,IAAI,OAAO;4BAChC,IAAI,eAAc,2BAAK;4BACvB,IAAI,cACF,CAAA,GAAA,kBAAU,EAAE;wBAEhB,CAAC;oBACH,CAAC;oBACD,KAAM;gBACR;YACA,KAAK;YACL,KAAK;gBACH,mGAAmG;gBACnG,oGAAoG;gBACpG,uDAAuD;gBACvD,IAAI,CAAC,EAAE,MAAM,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAc;oBAC1D,EAAE,eAAe;oBACjB,EAAE,cAAc;oBAChB,IAAI,OAAO,CAAC,aAAa,CAAC,aAAa,CACrC,IAAI,cAAc,EAAE,WAAW,CAAC,IAAI,EAAE,EAAE,WAAW;gBAEvD,CAAC;gBACD,KAAM;QACV;IACF;IAEA,IAAI,UAAU,CAAC,IAAM;QACnB,IAAI,EAAE,MAAM,KAAK,IAAI,OAAO,EAAE;YAC5B,8DAA8D;YAC9D,yDAAyD;YACzD,2DAA2D;YAC3D,iFAAiF;YACjF,yEAAyE;YACzE,iEAAiE;YACjE,IAAI,CAAC,CAAA,GAAA,qBAAc,AAAD,KAChB,MAAM,gBAAgB,CAAC,aAAa,CAAC,KAAK,GAAG;YAE/C;QACF,CAAC;IACH;IAEA,IAAI,WAA0B,CAAA,GAAA,iBAAS,EAAE,WAAW;QAClD,MAAM;QACN,kBAAkB;iBAClB;QACA,cAAc,KAAK,SAAS,IAAI;QAChC,iBAAiB,MAAM,gBAAgB,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,MAAM,gBAAgB,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,SAAS;QACzH,iBAAiB,MAAM,gBAAgB,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK;QAChE,mBAAmB,iBAAiB,KAAK,SAAS,GAAG,CAAC,EAAE,CAAA,GAAA,yCAAO,EAAE,OAAO,KAAK,GAAG,EAAE,CAAC,EAAE,cAAc,CAAC,GAAG,SAAS;QAChH,IAAI,CAAA,GAAA,yCAAO,EAAE,OAAO,KAAK,GAAG;IAC9B;IAEA,IAAI,eACF,QAAQ,CAAC,gBAAgB,GAAG,KAAK,KAAK,GAAG;IAG3C,IAAI,gBAAgB;QAClB,MAAM;QACN,iBAAiB;IACnB;IAEA,OAAO;kBACL;uBACA;QACA,kBAAkB;YAChB,IAAI;QACN;QACA,GAAG,UAAU;IACf;AACF;AAEA,SAAS,2BAAK,MAAkB,EAAE;IAChC,IAAI;IACJ,IAAI;IACJ,GAAG;QACD,OAAO,OAAO,SAAS;QACvB,IAAI,MACF,OAAO;IAEX,QAAS,MAAM;IACf,OAAO;AACT;;;AC7MA;;;;;;;;;;CAUC,GAED;;AASO,SAAS,0CAAgC,KAAqC,EAAE,KAAmB,EAA6B;IACrI,IAAI,OAAC,IAAG,EAAC,GAAG;IACZ,MAAM,iBAAC,cAAa,EAAC,GAAG,CAAA,GAAA,+BAAuB,EAAE,OAAO;IAExD,OAAO;QACL,eAAe;YACb,GAAG,aAAa;YAChB,mBAAmB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,CAAA,GAAA,yCAAQ,AAAD,EAAE,OAAO,KAAK,CAAC;QAClE;IACF;AACF;;","sources":["packages/@react-aria/gridlist/src/index.ts","packages/@react-aria/gridlist/src/useGridList.ts","packages/@react-aria/gridlist/src/utils.ts","packages/@react-aria/gridlist/src/useGridListItem.ts","packages/@react-aria/gridlist/src/useGridListSelectionCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useGridList} from './useGridList';\nexport {useGridListItem} from './useGridListItem';\nexport {useGridListSelectionCheckbox} from './useGridListSelectionCheckbox';\n\nexport type {AriaGridListOptions, AriaGridListProps, GridListAria, GridListProps} from './useGridList';\nexport type {AriaGridListItemOptions, GridListItemAria} from './useGridListItem';\nexport type {AriaGridSelectionCheckboxProps, GridSelectionCheckboxAria} from '@react-aria/grid';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AriaLabelingProps,\n  CollectionBase,\n  DisabledBehavior,\n  DOMAttributes,\n  DOMProps,\n  KeyboardDelegate,\n  MultipleSelection\n} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {listMap} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useGridSelectionAnnouncement, useHighlightSelectionDescription} from '@react-aria/grid';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface GridListProps<T> extends CollectionBase<T>, MultipleSelection {\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\nexport interface AriaGridListProps<T> extends GridListProps<T>, DOMProps, AriaLabelingProps {}\n\nexport interface AriaGridListOptions<T> extends Omit<AriaGridListProps<T>, 'children'> {\n  /** Whether the list uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\nexport interface GridListAria {\n  /** Props for the grid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a list component with interactive children.\n * A grid list displays data in a single column and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the list.\n * @param state - State for the list, as returned by `useListState`.\n * @param ref - The ref attached to the list element.\n */\nexport function useGridList<T>(props: AriaGridListOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): GridListAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    onAction\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let {listProps} = useSelectableList({\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref,\n    keyboardDelegate: keyboardDelegate,\n    isVirtualized,\n    selectOnFocus: state.selectionManager.selectionBehavior === 'replace'\n  });\n\n  let id = useId();\n  listMap.set(state, {id, onAction});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!onAction\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let gridProps: DOMAttributes = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    state.collection.size === 0 ? {} : listProps,\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = 1;\n  }\n\n  useGridSelectionAnnouncement({}, state);\n\n  return {\n    gridProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport type {ListState} from '@react-stately/list';\n\ninterface ListMapShared {\n  id: string,\n  onAction: (key: Key) => void\n}\n\n// Used to share:\n// id of the list and onAction between useList, useListItem, and useListSelectionCheckbox\nexport const listMap = new WeakMap<ListState<unknown>, ListMapShared>();\n\nexport function getRowId<T>(state: ListState<T>, key: Key) {\n  let {id} = listMap.get(state);\n  if (!id) {\n    throw new Error('Unknown list');\n  }\n\n  return `${id}-${normalizeKey(key)}`;\n}\n\nexport function normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, Node as RSNode} from '@react-types/shared';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {getRowId, listMap} from './utils';\nimport {isFocusVisible} from '@react-aria/interactions';\nimport type {ListState} from '@react-stately/list';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {KeyboardEvent as ReactKeyboardEvent, RefObject} from 'react';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaGridListItemOptions {\n  /** An object representing the list item. Contains all the relevant information that makes up the list row. */\n  node: RSNode<unknown>,\n  /** Whether the list row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean\n}\n\nexport interface GridListItemAria extends SelectableItemStates {\n  /** Props for the list row element. */\n  rowProps: DOMAttributes,\n  /** Props for the grid cell element within the list row. */\n  gridCellProps: DOMAttributes,\n  /** Props for the list item description element, if any. */\n  descriptionProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid list.\n * @param props - Props for the row.\n * @param state - State of the parent list, as returned by `useListState`.\n * @param ref - The ref attached to the row element.\n */\nexport function useGridListItem<T>(props: AriaGridListItemOptions, state: ListState<T>, ref: RefObject<FocusableElement>): GridListItemAria {\n  // Copied from useGridCell + some modifications to make it not so grid specific\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp\n  } = props;\n\n  let {direction} = useLocale();\n  let {onAction} = listMap.get(state);\n  let descriptionId = useSlotId();\n  let focus = () => {\n    // Don't shift focus to the row if the active element is a element within the row already\n    // (e.g. clicking on a row button)\n    if (!ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  };\n\n  let {itemProps, ...itemStates} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onAction ? () => onAction(node.key) : undefined,\n    focus\n  });\n\n  let onKeyDown = (e: ReactKeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target as Element)) {\n      return;\n    }\n\n    let walker = getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // Find the next focusable element within the row.\n        let focusable = direction === 'rtl'\n          ? walker.nextNode() as FocusableElement\n          : walker.previousNode() as FocusableElement;\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          // If there is no next focusable child, then return focus back to the row\n          e.preventDefault();\n          e.stopPropagation();\n          if (direction === 'rtl') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            let lastElement = last(walker);\n            if (lastElement) {\n              focusSafely(lastElement);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        let focusable = direction === 'rtl'\n          ? walker.previousNode() as FocusableElement\n          : walker.nextNode() as FocusableElement;\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n        } else {\n          e.preventDefault();\n          e.stopPropagation();\n          if (direction === 'ltr') {\n            focusSafely(ref.current);\n          } else {\n            walker.currentNode = ref.current;\n            let lastElement = last(walker);\n            if (lastElement) {\n              focusSafely(lastElement);\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate\n        // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target as Element)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(\n            new KeyboardEvent(e.nativeEvent.type, e.nativeEvent)\n          );\n        }\n        break;\n    }\n  };\n\n  let onFocus = (e) => {\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the row itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row\n      // in that case since the list should act like a single tab stop.\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocusedKey(node.key);\n      }\n      return;\n    }\n  };\n\n  let rowProps: DOMAttributes = mergeProps(itemProps, {\n    role: 'row',\n    onKeyDownCapture: onKeyDown,\n    onFocus,\n    'aria-label': node.textValue || undefined,\n    'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,\n    'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,\n    'aria-labelledby': descriptionId && node.textValue ? `${getRowId(state, node.key)} ${descriptionId}` : undefined,\n    id: getRowId(state, node.key)\n  });\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1;\n  }\n\n  let gridCellProps = {\n    role: 'gridcell',\n    'aria-colindex': 1\n  };\n\n  return {\n    rowProps,\n    gridCellProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    ...itemStates\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaGridSelectionCheckboxProps, GridSelectionCheckboxAria, useGridSelectionCheckbox} from '@react-aria/grid';\nimport {getRowId} from './utils';\nimport type {ListState} from '@react-stately/list';\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a grid list.\n * @param props - Props for the selection checkbox.\n * @param state - State of the list, as returned by `useListState`.\n */\nexport function useGridListSelectionCheckbox<T>(props: AriaGridSelectionCheckboxProps, state: ListState<T>): GridSelectionCheckboxAria {\n  let {key} = props;\n  const {checkboxProps} = useGridSelectionCheckbox(props, state as any);\n\n  return {\n    checkboxProps: {\n      ...checkboxProps,\n      'aria-labelledby': `${checkboxProps.id} ${getRowId(state, key)}`\n    }\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}