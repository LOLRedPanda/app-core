var $2wEZH$reactariautils = require("@react-aria/utils");
var $2wEZH$react = require("react");
var $2wEZH$reactariainteractions = require("@react-aria/interactions");
var $2wEZH$reactariatextfield = require("@react-aria/textfield");
var $2wEZH$reactariai18n = require("@react-aria/i18n");
var $2wEZH$reactariaspinbutton = require("@react-aria/spinbutton");

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "useNumberField", () => $fa863e9b015ae839$export$23f548e970bdf099);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

var $1bcaad54abc442a2$exports = {};
var $15c26e9e75543508$exports = {};
$15c26e9e75543508$exports = {
    "decrease": (args)=>`خفض ${args.fieldLabel}`,
    "increase": (args)=>`زيادة ${args.fieldLabel}`,
    "numberField": `حقل رقمي`
};


var $2d346802965e5c25$exports = {};
$2d346802965e5c25$exports = {
    "decrease": (args)=>`Намаляване ${args.fieldLabel}`,
    "increase": (args)=>`Усилване ${args.fieldLabel}`,
    "numberField": `Номер на полето`
};


var $09893e85abdd2974$exports = {};
$09893e85abdd2974$exports = {
    "decrease": (args)=>`Snížit ${args.fieldLabel}`,
    "increase": (args)=>`Zvýšit ${args.fieldLabel}`,
    "numberField": `Číselné pole`
};


var $413bf45f477fb4e1$exports = {};
$413bf45f477fb4e1$exports = {
    "decrease": (args)=>`Reducer ${args.fieldLabel}`,
    "increase": (args)=>`Øg ${args.fieldLabel}`,
    "numberField": `Talfelt`
};


var $2727845e2efab680$exports = {};
$2727845e2efab680$exports = {
    "decrease": (args)=>`${args.fieldLabel} verringern`,
    "increase": (args)=>`${args.fieldLabel} erhöhen`,
    "numberField": `Nummernfeld`
};


var $11030a3afacdbc2e$exports = {};
$11030a3afacdbc2e$exports = {
    "decrease": (args)=>`Μείωση ${args.fieldLabel}`,
    "increase": (args)=>`Αύξηση ${args.fieldLabel}`,
    "numberField": `Πεδίο αριθμού`
};


var $1e48617299cb10e8$exports = {};
$1e48617299cb10e8$exports = {
    "decrease": (args)=>`Decrease ${args.fieldLabel}`,
    "increase": (args)=>`Increase ${args.fieldLabel}`,
    "numberField": `Number field`
};


var $335176f389a02847$exports = {};
$335176f389a02847$exports = {
    "decrease": (args)=>`Reducir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo de número`
};


var $b08e7fdc34a812f3$exports = {};
$b08e7fdc34a812f3$exports = {
    "decrease": (args)=>`Vähenda ${args.fieldLabel}`,
    "increase": (args)=>`Suurenda ${args.fieldLabel}`,
    "numberField": `Numbri väli`
};


var $ce4c5a1eb7e6fc96$exports = {};
$ce4c5a1eb7e6fc96$exports = {
    "decrease": (args)=>`Vähennä ${args.fieldLabel}`,
    "increase": (args)=>`Lisää ${args.fieldLabel}`,
    "numberField": `Numerokenttä`
};


var $341f988ce23c559c$exports = {};
$341f988ce23c559c$exports = {
    "decrease": (args)=>`Diminuer ${args.fieldLabel}`,
    "increase": (args)=>`Augmenter ${args.fieldLabel}`,
    "numberField": `Champ de nombre`
};


var $950fd1a1d57d2f86$exports = {};
$950fd1a1d57d2f86$exports = {
    "decrease": (args)=>`הקטן ${args.fieldLabel}`,
    "increase": (args)=>`הגדל ${args.fieldLabel}`,
    "numberField": `שדה מספר`
};


var $7b949fa64cf10a07$exports = {};
$7b949fa64cf10a07$exports = {
    "decrease": (args)=>`Smanji ${args.fieldLabel}`,
    "increase": (args)=>`Povećaj ${args.fieldLabel}`,
    "numberField": `Polje broja`
};


var $a945ff6d5cb9cf90$exports = {};
$a945ff6d5cb9cf90$exports = {
    "decrease": (args)=>`${args.fieldLabel} csökkentése`,
    "increase": (args)=>`${args.fieldLabel} növelése`,
    "numberField": `Számmező`
};


var $f3393075c1f078d7$exports = {};
$f3393075c1f078d7$exports = {
    "decrease": (args)=>`Riduci ${args.fieldLabel}`,
    "increase": (args)=>`Aumenta ${args.fieldLabel}`,
    "numberField": `Campo numero`
};


var $a12655e072ef354d$exports = {};
$a12655e072ef354d$exports = {
    "decrease": (args)=>`${args.fieldLabel}を縮小`,
    "increase": (args)=>`${args.fieldLabel}を拡大`,
    "numberField": `数値フィールド`
};


var $880dbee0519c1bad$exports = {};
$880dbee0519c1bad$exports = {
    "decrease": (args)=>`${args.fieldLabel} 감소`,
    "increase": (args)=>`${args.fieldLabel} 증가`,
    "numberField": `번호 필드`
};


var $d4a9630b079105aa$exports = {};
$d4a9630b079105aa$exports = {
    "decrease": (args)=>`Sumažinti ${args.fieldLabel}`,
    "increase": (args)=>`Padidinti ${args.fieldLabel}`,
    "numberField": `Numerio laukas`
};


var $e358cd3315986eb7$exports = {};
$e358cd3315986eb7$exports = {
    "decrease": (args)=>`Samazināšana ${args.fieldLabel}`,
    "increase": (args)=>`Palielināšana ${args.fieldLabel}`,
    "numberField": `Skaitļu lauks`
};


var $a8d0ee8ec28363c7$exports = {};
$a8d0ee8ec28363c7$exports = {
    "decrease": (args)=>`Reduser ${args.fieldLabel}`,
    "increase": (args)=>`Øk ${args.fieldLabel}`,
    "numberField": `Tallfelt`
};


var $0073957e0c754983$exports = {};
$0073957e0c754983$exports = {
    "decrease": (args)=>`${args.fieldLabel} verlagen`,
    "increase": (args)=>`${args.fieldLabel} verhogen`,
    "numberField": `Getalveld`
};


var $51626cc4fccef54e$exports = {};
$51626cc4fccef54e$exports = {
    "decrease": (args)=>`Zmniejsz ${args.fieldLabel}`,
    "increase": (args)=>`Zwiększ ${args.fieldLabel}`,
    "numberField": `Pole numeru`
};


var $60b1cee412b56d27$exports = {};
$60b1cee412b56d27$exports = {
    "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo de número`
};


var $df9c7cc4e8072a0f$exports = {};
$df9c7cc4e8072a0f$exports = {
    "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo numérico`
};


var $aea54857f9df076d$exports = {};
$aea54857f9df076d$exports = {
    "decrease": (args)=>`Scădere ${args.fieldLabel}`,
    "increase": (args)=>`Creștere ${args.fieldLabel}`,
    "numberField": `Câmp numeric`
};


var $8337ebc47a7e61a3$exports = {};
$8337ebc47a7e61a3$exports = {
    "decrease": (args)=>`Уменьшение ${args.fieldLabel}`,
    "increase": (args)=>`Увеличение ${args.fieldLabel}`,
    "numberField": `Числовое поле`
};


var $4703837f8f4224f8$exports = {};
$4703837f8f4224f8$exports = {
    "decrease": (args)=>`Znížiť ${args.fieldLabel}`,
    "increase": (args)=>`Zvýšiť ${args.fieldLabel}`,
    "numberField": `Číselné pole`
};


var $2b9c8b37ab5bbcca$exports = {};
$2b9c8b37ab5bbcca$exports = {
    "decrease": (args)=>`Upadati ${args.fieldLabel}`,
    "increase": (args)=>`Povečajte ${args.fieldLabel}`,
    "numberField": `Številčno polje`
};


var $2c78665a3b81ed56$exports = {};
$2c78665a3b81ed56$exports = {
    "decrease": (args)=>`Decrease ${args.fieldLabel}`,
    "increase": (args)=>`Increase ${args.fieldLabel}`,
    "numberField": `Number field`
};


var $8da5dab2105c0d01$exports = {};
$8da5dab2105c0d01$exports = {
    "decrease": (args)=>`Minska ${args.fieldLabel}`,
    "increase": (args)=>`Öka ${args.fieldLabel}`,
    "numberField": `Nummerfält`
};


var $73a2418cb50e8fda$exports = {};
$73a2418cb50e8fda$exports = {
    "decrease": (args)=>`${args.fieldLabel} azalt`,
    "increase": (args)=>`${args.fieldLabel} arttır`,
    "numberField": `Sayı alanı`
};


var $9c85d1989bb8c41d$exports = {};
$9c85d1989bb8c41d$exports = {
    "decrease": (args)=>`Зменшити ${args.fieldLabel}`,
    "increase": (args)=>`Збільшити ${args.fieldLabel}`,
    "numberField": `Поле номера`
};


var $a7db09d81aa41beb$exports = {};
$a7db09d81aa41beb$exports = {
    "decrease": (args)=>`降低 ${args.fieldLabel}`,
    "increase": (args)=>`提高 ${args.fieldLabel}`,
    "numberField": `数字字段`
};


var $edd6ee4675b7a1cd$exports = {};
$edd6ee4675b7a1cd$exports = {
    "decrease": (args)=>`縮小 ${args.fieldLabel}`,
    "increase": (args)=>`放大 ${args.fieldLabel}`,
    "numberField": `數字欄位`
};


$1bcaad54abc442a2$exports = {
    "ar-AE": $15c26e9e75543508$exports,
    "bg-BG": $2d346802965e5c25$exports,
    "cs-CZ": $09893e85abdd2974$exports,
    "da-DK": $413bf45f477fb4e1$exports,
    "de-DE": $2727845e2efab680$exports,
    "el-GR": $11030a3afacdbc2e$exports,
    "en-US": $1e48617299cb10e8$exports,
    "es-ES": $335176f389a02847$exports,
    "et-EE": $b08e7fdc34a812f3$exports,
    "fi-FI": $ce4c5a1eb7e6fc96$exports,
    "fr-FR": $341f988ce23c559c$exports,
    "he-IL": $950fd1a1d57d2f86$exports,
    "hr-HR": $7b949fa64cf10a07$exports,
    "hu-HU": $a945ff6d5cb9cf90$exports,
    "it-IT": $f3393075c1f078d7$exports,
    "ja-JP": $a12655e072ef354d$exports,
    "ko-KR": $880dbee0519c1bad$exports,
    "lt-LT": $d4a9630b079105aa$exports,
    "lv-LV": $e358cd3315986eb7$exports,
    "nb-NO": $a8d0ee8ec28363c7$exports,
    "nl-NL": $0073957e0c754983$exports,
    "pl-PL": $51626cc4fccef54e$exports,
    "pt-BR": $60b1cee412b56d27$exports,
    "pt-PT": $df9c7cc4e8072a0f$exports,
    "ro-RO": $aea54857f9df076d$exports,
    "ru-RU": $8337ebc47a7e61a3$exports,
    "sk-SK": $4703837f8f4224f8$exports,
    "sl-SI": $2b9c8b37ab5bbcca$exports,
    "sr-SP": $2c78665a3b81ed56$exports,
    "sv-SE": $8da5dab2105c0d01$exports,
    "tr-TR": $73a2418cb50e8fda$exports,
    "uk-UA": $9c85d1989bb8c41d$exports,
    "zh-CN": $a7db09d81aa41beb$exports,
    "zh-TW": $edd6ee4675b7a1cd$exports
};







function $fa863e9b015ae839$export$23f548e970bdf099(props, state, inputRef) {
    let { id: id , decrementAriaLabel: decrementAriaLabel , incrementAriaLabel: incrementAriaLabel , isDisabled: isDisabled , isReadOnly: isReadOnly , isRequired: isRequired , minValue: minValue , maxValue: maxValue , autoFocus: autoFocus , validationState: validationState , label: label , formatOptions: formatOptions , onBlur: onBlur = ()=>{} , onFocus: onFocus , onFocusChange: onFocusChange , onKeyDown: onKeyDown , onKeyUp: onKeyUp , description: description , errorMessage: errorMessage , ...otherProps } = props;
    let { increment: increment , incrementToMax: incrementToMax , decrement: decrement , decrementToMin: decrementToMin , numberValue: numberValue , commit: commit  } = state;
    const stringFormatter = (0, $2wEZH$reactariai18n.useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($1bcaad54abc442a2$exports))));
    let inputId = (0, $2wEZH$reactariautils.useId)(id);
    let { focusProps: focusProps  } = (0, $2wEZH$reactariainteractions.useFocus)({
        onBlur: ()=>{
            // Set input value to normalized valid value
            commit();
        }
    });
    let { spinButtonProps: spinButtonProps , incrementButtonProps: incButtonProps , decrementButtonProps: decButtonProps  } = (0, $2wEZH$reactariaspinbutton.useSpinButton)({
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        maxValue: maxValue,
        minValue: minValue,
        onIncrement: increment,
        onIncrementToMax: incrementToMax,
        onDecrement: decrement,
        onDecrementToMin: decrementToMin,
        value: numberValue,
        textValue: state.inputValue
    });
    let [focusWithin, setFocusWithin] = (0, $2wEZH$react.useState)(false);
    let { focusWithinProps: focusWithinProps  } = (0, $2wEZH$reactariainteractions.useFocusWithin)({
        isDisabled: isDisabled,
        onFocusWithinChange: setFocusWithin
    });
    let onWheel = (0, $2wEZH$react.useCallback)((e)=>{
        // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change
        // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec
        // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication
        // especially if the user is scrolling near 45deg
        if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;
        if (e.deltaY > 0) increment();
        else if (e.deltaY < 0) decrement();
    }, [
        decrement,
        increment
    ]);
    // If the input isn't supposed to receive input, disable scrolling.
    let scrollingDisabled = isDisabled || isReadOnly || !focusWithin;
    (0, $2wEZH$reactariainteractions.useScrollWheel)({
        onScroll: onWheel,
        isDisabled: scrollingDisabled
    }, inputRef);
    // The inputMode attribute influences the software keyboard that is shown on touch devices.
    // Browsers and operating systems are quite inconsistent about what keys are available, however.
    // We choose between numeric and decimal based on whether we allow negative and fractional numbers,
    // and based on testing on various devices to determine what keys are available in each inputMode.
    let numberFormatter = (0, $2wEZH$reactariai18n.useNumberFormatter)(formatOptions);
    let intlOptions = (0, $2wEZH$react.useMemo)(()=>numberFormatter.resolvedOptions(), [
        numberFormatter
    ]);
    let hasDecimals = intlOptions.maximumFractionDigits > 0;
    let hasNegative = isNaN(state.minValue) || state.minValue < 0;
    let inputMode = "numeric";
    if ((0, $2wEZH$reactariautils.isIPhone)()) {
        // iPhone doesn't have a minus sign in either numeric or decimal.
        // Note this is only for iPhone, not iPad, which always has both
        // minus and decimal in numeric.
        if (hasNegative) inputMode = "text";
        else if (hasDecimals) inputMode = "decimal";
    } else if ((0, $2wEZH$reactariautils.isAndroid)()) {
        // Android numeric has both a decimal point and minus key.
        // decimal does not have a minus key.
        if (hasNegative) inputMode = "numeric";
        else if (hasDecimals) inputMode = "decimal";
    }
    let onChange = (value)=>{
        state.setInputValue(value);
    };
    let domProps = (0, $2wEZH$reactariautils.filterDOMProps)(props);
    let { labelProps: labelProps , inputProps: textFieldProps , descriptionProps: descriptionProps , errorMessageProps: errorMessageProps  } = (0, $2wEZH$reactariatextfield.useFormattedTextField)({
        ...otherProps,
        ...domProps,
        label: label,
        autoFocus: autoFocus,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        validationState: validationState,
        value: state.inputValue,
        defaultValue: undefined,
        autoComplete: "off",
        "aria-label": props["aria-label"] || null,
        "aria-labelledby": props["aria-labelledby"] || null,
        id: inputId,
        type: "text",
        inputMode: inputMode,
        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,
        onFocusChange: onFocusChange,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        description: description,
        errorMessage: errorMessage
    }, state, inputRef);
    let inputProps = (0, $2wEZH$reactariautils.mergeProps)(spinButtonProps, focusProps, textFieldProps, {
        // override the spinbutton role, we can't focus a spin button with VO
        role: null,
        // ignore aria-roledescription on iOS so that required state will announce when it is present
        "aria-roledescription": !(0, $2wEZH$reactariautils.isIOS)() ? stringFormatter.format("numberField") : null,
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null,
        autoCorrect: "off",
        spellCheck: "false"
    });
    let onButtonPressStart = (e)=>{
        // If focus is already on the input, keep it there so we don't hide the
        // software keyboard when tapping the increment/decrement buttons.
        if (document.activeElement === inputRef.current) return;
        // Otherwise, when using a mouse, move focus to the input.
        // On touch, or with a screen reader, focus the button so that the software
        // keyboard does not appear and the screen reader cursor is not moved off the button.
        if (e.pointerType === "mouse") inputRef.current.focus();
        else e.target.focus();
    };
    // Determine the label for the increment and decrement buttons. There are 4 cases:
    //
    // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`
    // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'
    // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`
    // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`
    //
    // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in
    // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change
    // the order or add additional words around the label if needed.
    let fieldLabel = props["aria-label"] || (typeof props.label === "string" ? props.label : "");
    let ariaLabelledby;
    if (!fieldLabel) ariaLabelledby = props.label != null ? labelProps.id : props["aria-labelledby"];
    let incrementId = (0, $2wEZH$reactariautils.useId)();
    let decrementId = (0, $2wEZH$reactariautils.useId)();
    let incrementButtonProps = (0, $2wEZH$reactariautils.mergeProps)(incButtonProps, {
        "aria-label": incrementAriaLabel || stringFormatter.format("increase", {
            fieldLabel: fieldLabel
        }).trim(),
        id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,
        "aria-labelledby": ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,
        "aria-controls": inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        allowFocusWhenDisabled: true,
        isDisabled: !state.canIncrement,
        onPressStart: onButtonPressStart
    });
    let decrementButtonProps = (0, $2wEZH$reactariautils.mergeProps)(decButtonProps, {
        "aria-label": decrementAriaLabel || stringFormatter.format("decrease", {
            fieldLabel: fieldLabel
        }).trim(),
        id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,
        "aria-labelledby": ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,
        "aria-controls": inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        allowFocusWhenDisabled: true,
        isDisabled: !state.canDecrement,
        onPressStart: onButtonPressStart
    });
    return {
        groupProps: {
            role: "group",
            "aria-disabled": isDisabled,
            "aria-invalid": validationState === "invalid" ? "true" : undefined,
            ...focusWithinProps
        },
        labelProps: labelProps,
        inputProps: inputProps,
        incrementButtonProps: incrementButtonProps,
        decrementButtonProps: decrementButtonProps,
        errorMessageProps: errorMessageProps,
        descriptionProps: descriptionProps
    };
}




//# sourceMappingURL=main.js.map
