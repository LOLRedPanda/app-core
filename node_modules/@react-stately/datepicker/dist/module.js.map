{"mappings":"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","sources":["packages/@react-stately/datepicker/src/index.ts","packages/@react-stately/datepicker/src/useDatePickerState.ts","packages/@react-stately/datepicker/src/utils.ts","packages/@react-stately/datepicker/src/useDateFieldState.ts","packages/@react-stately/datepicker/src/placeholders.ts","packages/@react-stately/datepicker/src/useDateRangePickerState.ts","packages/@react-stately/datepicker/src/useTimeFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useDatePickerState} from './useDatePickerState';\nexport {useDateFieldState} from './useDateFieldState';\nexport {useDateRangePickerState} from './useDateRangePickerState';\nexport {useTimeFieldState} from './useTimeFieldState';\n\nexport type {DateFieldStateOptions, DateFieldState, DateSegment, SegmentType} from './useDateFieldState';\nexport type {DatePickerStateOptions, DatePickerState} from './useDatePickerState';\nexport type {DateRangePickerStateOptions, DateRangePickerState} from './useDateRangePickerState';\nexport type {TimeFieldStateOptions} from './useTimeFieldState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, useDefaultProps} from './utils';\nimport {isInvalid} from './utils';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useControlledState} from '@react-stately/utils';\nimport {useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface DatePickerStateOptions<T extends DateValue> extends DatePickerProps<T> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\nexport interface DatePickerState extends OverlayTriggerState {\n  /** The currently selected date. */\n  value: DateValue,\n  /** Sets the selected date. */\n  setValue(value: DateValue): void,\n  /**\n   * The date portion of the value. This may be set prior to `value` if the user has\n   * selected a date but has not yet selected a time.\n   */\n  dateValue: DateValue,\n  /** Sets the date portion of the value. */\n  setDateValue(value: CalendarDate): void,\n  /**\n   * The time portion of the value. This may be set prior to `value` if the user has\n   * selected a time but has not yet selected a date.\n   */\n  timeValue: TimeValue,\n  /** Sets the time portion of the value. */\n  setTimeValue(value: TimeValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date picker supports selecting a time, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /** The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** Formats the selected value using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): string\n}\n\n/**\n * Provides state management for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePickerState<T extends DateValue = DateValue>(props: DatePickerStateOptions<T>): DatePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [value, setValue] = useControlledState<DateValue>(props.value, props.defaultValue || null, props.onChange);\n\n  let v = (value || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone ?? 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [selectedDate, setSelectedDate] = useState<DateValue>(null);\n  let [selectedTime, setSelectedTime] = useState<TimeValue>(null);\n\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) {\n      selectedTime = value;\n    }\n  }\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let commitValue = (date: DateValue, time: TimeValue) => {\n    setValue('timeZone' in time ? time.set(toCalendarDate(date)) : toCalendarDateTime(date, time));\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = (newValue: CalendarDate) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) {\n        commitValue(newValue, selectedTime || getPlaceholderTime(props.placeholderValue));\n      } else {\n        setSelectedDate(newValue);\n      }\n    } else {\n      setValue(newValue);\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let selectTime = (newValue: TimeValue) => {\n    if (selectedDate) {\n      commitValue(selectedDate, newValue);\n    } else {\n      setSelectedTime(newValue);\n    }\n  };\n\n  let validationState: ValidationState = props.validationState ||\n    (isInvalid(value, props.minValue, props.maxValue) ? 'invalid' : null) ||\n    (value && props.isDateUnavailable?.(value) ? 'invalid' : null);\n\n  return {\n    value,\n    setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity,\n    hasTime,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) {\n        commitValue(selectedDate, selectedTime || getPlaceholderTime(props.placeholderValue));\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, {\n        granularity,\n        timeZone: defaultTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: value.calendar.identifier === 'gregory' && value.era === 'BC'\n      });\n\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, now, Time, toCalendar, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {useRef} from 'react';\n\nexport function isInvalid(value: DateValue, minValue: DateValue, maxValue: DateValue) {\n  return value != null && (\n    (minValue != null && value.compare(minValue) < 0) ||\n    (maxValue != null && value.compare(maxValue) > 0)\n  );\n}\n\nexport type FieldOptions = Pick<Intl.DateTimeFormatOptions, 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second'>;\ninterface FormatterOptions {\n  timeZone?: string,\n  hideTimeZone?: boolean,\n  granularity?: DatePickerProps<any>['granularity'],\n  maxGranularity?: 'year' | 'month' | DatePickerProps<any>['granularity'],\n  hourCycle?: 12 | 24,\n  showEra?: boolean\n}\n\nconst DEFAULT_FIELD_OPTIONS: FieldOptions = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nexport function getFormatOptions(\n  fieldOptions: FieldOptions,\n  options: FormatterOptions\n): Intl.DateTimeFormatOptions {\n  fieldOptions = {...DEFAULT_FIELD_OPTIONS, ...fieldOptions};\n  let granularity = options.granularity || 'minute';\n  let keys = Object.keys(fieldOptions);\n  let startIdx = keys.indexOf(options.maxGranularity ?? 'year');\n  if (startIdx < 0) {\n    startIdx = 0;\n  }\n\n  let endIdx = keys.indexOf(granularity);\n  if (endIdx < 0) {\n    endIdx = 2;\n  }\n\n  if (startIdx > endIdx) {\n    throw new Error('maxGranularity must be greater than granularity');\n  }\n\n  let opts: Intl.DateTimeFormatOptions = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {\n    opts[key] = fieldOptions[key];\n    return opts;\n  }, {});\n\n  if (options.hourCycle != null) {\n    opts.hour12 = options.hourCycle === 12;\n  }\n\n  opts.timeZone = options.timeZone || 'UTC';\n\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  if (hasTime && options.timeZone && !options.hideTimeZone) {\n    opts.timeZoneName = 'short';\n  }\n\n  if (options.showEra && startIdx === 0) {\n    opts.era = 'short';\n  }\n\n  return opts;\n}\n\nexport function getPlaceholderTime(placeholderValue: DateValue): TimeValue {\n  if (placeholderValue && 'hour' in placeholderValue) {\n    return placeholderValue;\n  }\n\n  return new Time();\n}\n\nexport function convertValue(value: DateValue, calendar: Calendar): DateValue {\n  if (value === null) {\n    return null;\n  }\n\n  if (!value) {\n    return undefined;\n  }\n\n  return toCalendar(value, calendar);\n}\n\n\nexport function createPlaceholderDate(placeholderValue: DateValue, granularity: string, calendar: Calendar, timeZone: string) {\n  if (placeholderValue) {\n    return convertValue(placeholderValue, calendar);\n  }\n\n  let date = toCalendar(now(timeZone).set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  }), calendar);\n\n  if (granularity === 'year' || granularity === 'month' || granularity === 'day') {\n    return toCalendarDate(date);\n  }\n\n  if (!timeZone) {\n    return toCalendarDateTime(date);\n  }\n\n  return date;\n}\n\nexport function useDefaultProps(v: DateValue, granularity: Granularity): [Granularity, string] {\n  // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n  let lastValue = useRef(v);\n  if (v) {\n    lastValue.current = v;\n  }\n\n  v = lastValue.current;\n  let defaultTimeZone = (v && 'timeZone' in v ? v.timeZone : undefined);\n  granularity = granularity || (v && 'minute' in v ? 'minute' : 'day');\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  return [granularity, defaultTimeZone];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, getMinimumDayInMonth, getMinimumMonthInYear, GregorianCalendar, toCalendar} from '@internationalized/date';\nimport {convertValue, createPlaceholderDate, FieldOptions, getFormatOptions, isInvalid, useDefaultProps} from './utils';\nimport {DatePickerProps, DateValue, Granularity} from '@react-types/datepicker';\nimport {getPlaceholder} from './placeholders';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport type SegmentType = 'era' | 'year' | 'month' | 'day' |  'hour' | 'minute' | 'second' | 'dayPeriod' | 'literal' | 'timeZoneName';\nexport interface DateSegment {\n  /** The type of segment. */\n  type: SegmentType,\n  /** The formatted text for the segment. */\n  text: string,\n  /** The numeric value for the segment, if applicable. */\n  value?: number,\n  /** The minimum numeric value for the segment, if applicable. */\n  minValue?: number,\n  /** The maximum numeric value for the segment, if applicable. */\n  maxValue?: number,\n  /** Whether the value is a placeholder. */\n  isPlaceholder: boolean,\n  /** A placeholder string for the segment. */\n  placeholder: string,\n  /** Whether the segment is editable. */\n  isEditable: boolean\n}\n\nexport interface DateFieldState {\n  /** The current field value. */\n  value: DateValue,\n  /** The current value, converted to a native JavaScript `Date` object.  */\n  dateValue: Date,\n  /** The calendar system currently in use. */\n  calendar: Calendar,\n  /** Sets the field's value. */\n  setValue(value: DateValue): void,\n  /** A list of segments for the current value. */\n  segments: DateSegment[],\n  /** A date formatter configured for the current locale and format. */\n  dateFormatter: DateFormatter,\n  /** The current validation state of the date field, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** The maximum date or time unit that is displayed in the field. */\n  maxGranularity: 'year' | 'month' | Granularity,\n  /** Whether the field is disabled. */\n  isDisabled: boolean,\n  /** Whether the field is read only. */\n  isReadOnly: boolean,\n  /** Whether the field is required. */\n  isRequired: boolean,\n  /** Increments the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  increment(type: SegmentType): void,\n  /** Decrements the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  decrement(type: SegmentType): void,\n  /**\n   * Increments the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to increment by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  incrementPage(type: SegmentType): void,\n  /**\n   * Decrements the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to decrement by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  decrementPage(type: SegmentType): void,\n  /** Sets the value of the given segment. */\n  setSegment(type: 'era', value: string): void,\n  setSegment(type: SegmentType, value: number): void,\n  /** Updates the remaining unfilled segments with the placeholder value. */\n  confirmPlaceholder(): void,\n  /** Clears the value of the given segment, reverting it to the placeholder. */\n  clearSegment(type: SegmentType): void,\n  /** Formats the current date value using the given options. */\n  formatValue(fieldOptions: FieldOptions): string\n}\n\nconst EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\n\nconst PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n\n// Node seems to convert everything to lowercase...\nconst TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nexport interface DateFieldStateOptions extends DatePickerProps<DateValue> {\n  /**\n   * The maximum unit to display in the date field.\n   * @default 'year'\n   */\n  maxGranularity?: 'year' | 'month' | Granularity,\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar\n}\n\n/**\n * Provides state management for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateFieldState(props: DateFieldStateOptions): DateFieldState {\n  let {\n    locale,\n    createCalendar,\n    hideTimeZone,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  } = props;\n\n  let v: DateValue = (props.value || props.defaultValue || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let defaultFormatter = useMemo(() => new DateFormatter(locale), [locale]);\n  let calendar = useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n\n  let [value, setDate] = useControlledState<DateValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let calendarValue = useMemo(() => convertValue(value, calendar), [value, calendar]);\n\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = useState(\n    () => createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n  );\n\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra\n  }), [props.maxGranularity, granularity, props.hourCycle, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = useMemo(() => getFormatOptions({}, formatOpts), [formatOpts]);\n\n  let dateFormatter = useMemo(() => new DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments: Partial<typeof EDITABLE_SEGMENTS> = useMemo(() =>\n    dateFormatter.formatToParts(new Date())\n      .filter(seg => EDITABLE_SEGMENTS[seg.type])\n      .reduce((p, seg) => (p[seg.type] = true, p), {})\n  , [dateFormatter]);\n\n  let [validSegments, setValidSegments] = useState<Partial<typeof EDITABLE_SEGMENTS>>(\n    () => props.value || props.defaultValue ? {...allSegments} : {}\n  );\n\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = useRef(calendar.identifier);\n  useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder =>\n        Object.keys(validSegments).length > 0\n          ? toCalendar(placeholder, calendar)\n          : createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n      );\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {...allSegments};\n    setValidSegments(validSegments);\n  }\n\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = (newValue: DateValue) => {\n    if (props.isDisabled || props.isReadOnly) {\n      return;\n    }\n\n    if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, v?.calendar || new GregorianCalendar());\n      setDate(newValue);\n    } else {\n      setPlaceholderDate(newValue);\n    }\n  };\n\n  let dateValue = useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = useMemo(() =>\n    dateFormatter.formatToParts(dateValue)\n      .map(segment => {\n        let isEditable = EDITABLE_SEGMENTS[segment.type];\n        if (segment.type === 'era' && calendar.getEras().length === 1) {\n          isEditable = false;\n        }\n\n        let isPlaceholder = EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n        let placeholder = EDITABLE_SEGMENTS[segment.type] ? getPlaceholder(segment.type, segment.value, locale) : null;\n        return {\n          type: TYPE_MAPPING[segment.type] || segment.type,\n          text: isPlaceholder ? placeholder : segment.value,\n          ...getSegmentLimits(displayValue, segment.type, resolvedOptions),\n          isPlaceholder,\n          placeholder,\n          isEditable\n        } as DateSegment;\n      })\n  , [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({...validSegments});\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({...validSegments});\n  }\n\n  let markValid = (part: Intl.DateTimeFormatPartTypes) => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) {\n      validSegments.era = true;\n    }\n    setValidSegments({...validSegments});\n  };\n\n  let adjustSegment = (type: Intl.DateTimeFormatPartTypes, amount: number) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      if (Object.keys(validSegments).length >= Object.keys(allSegments).length) {\n        setValue(displayValue);\n      }\n    } else {\n      setValue(addSegment(displayValue, type, amount, resolvedOptions));\n    }\n  };\n\n  let validationState: ValidationState = props.validationState ||\n    (isInvalid(calendarValue, props.minValue, props.maxValue) ? 'invalid' : null);\n\n  return {\n    value: calendarValue,\n    dateValue,\n    calendar,\n    setValue,\n    segments,\n    dateFormatter,\n    validationState,\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -(PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue(setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) {\n        return;\n      }\n\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {...allSegments};\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      setValidSegments({...validSegments});\n\n      let placeholder = createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour - 12});\n        } else if (!isPM && shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour + 12});\n        }\n      } else if (part in displayValue) {\n        value = displayValue.set({[part]: placeholder[part]});\n      }\n\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions: FieldOptions) {\n      if (!calendarValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\nfunction getSegmentLimits(date: DateValue, type: string, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (type) {\n    case 'era': {\n      let eras = date.calendar.getEras();\n      return {\n        value: eras.indexOf(date.era),\n        minValue: 0,\n        maxValue: eras.length - 1\n      };\n    }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) {\n    switch (type) {\n      case 'dayPeriod':\n        return {\n          value: date.hour >= 12 ? 12 : 0,\n          minValue: 0,\n          maxValue: 12\n        };\n      case 'hour':\n        if (options.hour12) {\n          let isPM = date.hour >= 12;\n          return {\n            value: date.hour,\n            minValue: isPM ? 12 : 0,\n            maxValue: isPM ? 23 : 11\n          };\n        }\n\n        return {\n          value: date.hour,\n          minValue: 0,\n          maxValue: 23\n        };\n      case 'minute':\n        return {\n          value: date.minute,\n          minValue: 0,\n          maxValue: 59\n        };\n      case 'second':\n        return {\n          value: date.second,\n          minValue: 0,\n          maxValue: 59\n        };\n    }\n  }\n\n  return {};\n}\n\nfunction addSegment(value: DateValue, part: string, amount: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {round: part === 'year'});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({hour: isPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return value.cycle(part, amount, {\n          round: part !== 'hour',\n          hourCycle: options.hour12 ? 12 : 24\n        });\n    }\n  }\n}\n\nfunction setSegment(value: DateValue, part: string, segmentValue: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({[part]: segmentValue});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) {\n          return value;\n        }\n        return value.set({hour: wasPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n        // In 12 hour time, ensure that AM/PM does not change\n        if (options.hour12) {\n          let hours = value.hour;\n          let wasPM = hours >= 12;\n          if (!wasPM && segmentValue === 12) {\n            segmentValue = 0;\n          }\n          if (wasPM && segmentValue < 12) {\n            segmentValue += 12;\n          }\n        }\n        // fallthrough\n      case 'minute':\n      case 'second':\n        return value.set({[part]: segmentValue});\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {LocalizedStringDictionary} from '@internationalized/string';\n\n// These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\nconst placeholders = new LocalizedStringDictionary({\n  ach: {year: 'mwaka', month: 'dwe', day: 'nino'},\n  af: {year: 'jjjj', month: 'mm', day: 'dd'},\n  am: {year: 'ዓዓዓዓ', month: 'ሚሜ', day: 'ቀቀ'},\n  an: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ar: {year: 'سنة', month: 'شهر', day: 'يوم'},\n  ast: {year: 'aaaa', month: 'mm', day: 'dd'},\n  az: {year: 'iiii', month: 'aa', day: 'gg'},\n  be: {year: 'гггг', month: 'мм', day: 'дд'},\n  bg: {year: 'гггг', month: 'мм', day: 'дд'},\n  bn: {year: 'yyyy', month: 'মিমি', day: 'dd'},\n  br: {year: 'bbbb', month: 'mm', day: 'dd'},\n  bs: {year: 'gggg', month: 'mm', day: 'dd'},\n  ca: {year: 'aaaa', month: 'mm', day: 'dd'},\n  cak: {year: 'jjjj', month: 'ii', day: \"q'q'\"},\n  ckb: {year: 'ساڵ', month: 'مانگ', day: 'ڕۆژ'},\n  cs: {year: 'rrrr', month: 'mm', day: 'dd'},\n  cy: {year: 'bbbb', month: 'mm', day: 'dd'},\n  da: {year: 'åååå', month: 'mm', day: 'dd'},\n  de: {year: 'jjjj', month: 'mm', day: 'tt'},\n  dsb: {year: 'llll', month: 'mm', day: 'źź'},\n  el: {year: 'εεεε', month: 'μμ', day: 'ηη'},\n  en: {year: 'yyyy', month: 'mm', day: 'dd'},\n  eo: {year: 'jjjj', month: 'mm', day: 'tt'},\n  es: {year: 'aaaa', month: 'mm', day: 'dd'},\n  et: {year: 'aaaa', month: 'kk', day: 'pp'},\n  eu: {year: 'uuuu', month: 'hh', day: 'ee'},\n  fa: {year: 'سال', month: 'ماه', day: 'روز'},\n  ff: {year: 'hhhh', month: 'll', day: 'ññ'},\n  fi: {year: 'vvvv', month: 'kk', day: 'pp'},\n  fr: {year: 'aaaa', month: 'mm', day: 'jj'},\n  fy: {year: 'jjjj', month: 'mm', day: 'dd'},\n  ga: {year: 'bbbb', month: 'mm', day: 'll'},\n  gd: {year: 'bbbb', month: 'mm', day: 'll'},\n  gl: {year: 'aaaa', month: 'mm', day: 'dd'},\n  he: {year: 'שנה', month: 'חודש', day: 'יום'},\n  hr: {year: 'gggg', month: 'mm', day: 'dd'},\n  hsb: {year: 'llll', month: 'mm', day: 'dd'},\n  hu: {year: 'éééé', month: 'hh', day: 'nn'},\n  ia: {year: 'aaaa', month: 'mm', day: 'dd'},\n  id: {year: 'tttt', month: 'bb', day: 'hh'},\n  it: {year: 'aaaa', month: 'mm', day: 'gg'},\n  ja: {year: ' 年 ', month: '月', day: '日'},\n  ka: {year: 'წწწწ', month: 'თთ', day: 'რრ'},\n  kk: {year: 'жжжж', month: 'аа', day: 'кк'},\n  kn: {year: 'ವವವವ', month: 'ಮಿಮೀ', day: 'ದಿದಿ'},\n  ko: {year: '연도', month: '월', day: '일'},\n  lb: {year: 'jjjj', month: 'mm', day: 'dd'},\n  lo: {year: 'ປປປປ', month: 'ດດ', day: 'ວວ'},\n  lt: {year: 'mmmm', month: 'mm', day: 'dd'},\n  lv: {year: 'gggg', month: 'mm', day: 'dd'},\n  meh: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ml: {year: 'വർഷം', month: 'മാസം', day: 'തീയതി'},\n  ms: {year: 'tttt', month: 'mm', day: 'hh'},\n  nl: {year: 'jjjj', month: 'mm', day: 'dd'},\n  nn: {year: 'åååå', month: 'mm', day: 'dd'},\n  no: {year: 'åååå', month: 'mm', day: 'dd'},\n  oc: {year: 'aaaa', month: 'mm', day: 'jj'},\n  pl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  pt: {year: 'aaaa', month: 'mm', day: 'dd'},\n  rm: {year: 'oooo', month: 'mm', day: 'dd'},\n  ro: {year: 'aaaa', month: 'll', day: 'zz'},\n  ru: {year: 'гггг', month: 'мм', day: 'дд'},\n  sc: {year: 'aaaa', month: 'mm', day: 'dd'},\n  scn: {year: 'aaaa', month: 'mm', day: 'jj'},\n  sk: {year: 'rrrr', month: 'mm', day: 'dd'},\n  sl: {year: 'llll', month: 'mm', day: 'dd'},\n  sr: {year: 'гггг', month: 'мм', day: 'дд'},\n  sv: {year: 'åååå', month: 'mm', day: 'dd'},\n  szl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  tg: {year: 'сссс', month: 'мм', day: 'рр'},\n  th: {year: 'ปปปป', month: 'ดด', day: 'วว'},\n  tr: {year: 'yyyy', month: 'aa', day: 'gg'},\n  uk: {year: 'рррр', month: 'мм', day: 'дд'},\n  'zh-CN': {year: '年', month: '月', day: '日'},\n  'zh-TW': {year: '年', month: '月', day: '日'}\n}, 'en');\n\nexport function getPlaceholder(field: string, value: string, locale: string) {\n  // Use the actual placeholder value for the era and day period fields.\n  if (field === 'era' || field === 'dayPeriod') {\n    return value;\n  }\n\n  if (field === 'year' || field === 'month' || field === 'day') {\n    return placeholders.getStringForLocale(field, locale);\n  }\n\n  // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n  return '––';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DateRange, DateRangePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, isInvalid, useDefaultProps} from './utils';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {RangeValue, ValidationState} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\nimport {useState} from 'react';\n\nexport interface DateRangePickerStateOptions extends DateRangePickerProps<DateValue> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\ntype TimeRange = RangeValue<TimeValue>;\nexport interface DateRangePickerState extends OverlayTriggerState {\n  /** The currently selected date range. */\n  value: DateRange,\n  /** Sets the selected date range. */\n  setValue(value: DateRange): void,\n  /**\n   * The date portion of the selected range. This may be set prior to `value` if the user has\n   * selected a date range but has not yet selected a time range.\n   */\n  dateRange: DateRange,\n  /** Sets the date portion of the selected range. */\n  setDateRange(value: DateRange): void,\n  /**\n   * The time portion of the selected range. This may be set prior to `value` if the user has\n   * selected a time range but has not yet selected a date range.\n   */\n  timeRange: TimeRange,\n  /** Sets the time portion of the selected range. */\n  setTimeRange(value: TimeRange): void,\n  /** Sets the date portion of either the start or end of the selected range. */\n  setDate(part: 'start' | 'end', value: DateValue): void,\n  /** Sets the time portion of either the start or end of the selected range. */\n  setTime(part: 'start' | 'end', value: TimeValue): void,\n  /** Sets the date and time of either the start or end of the selected range. */\n  setDateTime(part: 'start' | 'end', value: DateValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date range picker supports selecting times, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /** The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props. */\n  validationState: ValidationState,\n  /** Formats the selected range using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): {start: string, end: string}\n}\n\n/**\n * Provides state management for a date range picker component.\n * A date range picker combines two DateFields and a RangeCalendar popover to allow\n * users to enter or select a date and time range.\n */\nexport function useDateRangePickerState(props: DateRangePickerStateOptions): DateRangePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [controlledValue, setControlledValue] = useControlledState<DateRange>(props.value, props.defaultValue || null, props.onChange);\n  let [placeholderValue, setPlaceholderValue] = useState(() => controlledValue || {start: null, end: null});\n\n  // Reset the placeholder if the value prop is set to null.\n  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n    placeholderValue = {start: null, end: null};\n    setPlaceholderValue(placeholderValue);\n  }\n\n  let value = controlledValue || placeholderValue;\n\n  let setValue = (value: DateRange) => {\n    setPlaceholderValue(value);\n    if (value?.start && value.end) {\n      setControlledValue(value);\n    } else {\n      setControlledValue(null);\n    }\n  };\n\n  let v = (value?.start || value?.end || props.placeholderValue);\n  let [granularity] = useDefaultProps(v, props.granularity);\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [dateRange, setSelectedDateRange] = useState<DateRange>(null);\n  let [timeRange, setSelectedTimeRange] = useState<TimeRange>(null);\n\n  if (value && value.start && value.end) {\n    dateRange = value;\n    if ('hour' in value.start) {\n      timeRange = value as TimeRange;\n    }\n  }\n\n  let commitValue = (dateRange: DateRange, timeRange: TimeRange) => {\n    setValue({\n      start: 'timeZone' in timeRange.start ? timeRange.start.set(toCalendarDate(dateRange.start)) : toCalendarDateTime(dateRange.start, timeRange.start),\n      end: 'timeZone' in timeRange.end ? timeRange.end.set(toCalendarDate(dateRange.end)) : toCalendarDateTime(dateRange.end, timeRange.end)\n    });\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let setDateRange = (range: DateRange) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (shouldClose || (range.start && range.end && timeRange?.start && timeRange?.end)) {\n        commitValue(range, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      } else {\n        setSelectedDateRange(range);\n      }\n    } else if (range.start && range.end) {\n      setValue(range);\n    } else {\n      setSelectedDateRange(range);\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let setTimeRange = (range: TimeRange) => {\n    if (dateRange?.start && dateRange?.end && range.start && range.end) {\n      commitValue(dateRange, range);\n    } else {\n      setSelectedTimeRange(range);\n    }\n  };\n\n  let validationState: ValidationState = props.validationState\n    || (value != null && (\n      isInvalid(value.start, props.minValue, props.maxValue) ||\n      isInvalid(value.end, props.minValue, props.maxValue) ||\n      (value.end != null && value.start != null && value.end.compare(value.start) < 0) ||\n      (value?.start && props.isDateUnavailable?.(value.start)) ||\n      (value?.end && props.isDateUnavailable?.(value.end))\n    ) ? 'invalid' : null);\n\n  return {\n    value,\n    setValue,\n    dateRange,\n    timeRange,\n    granularity,\n    hasTime,\n    setDate(part, date) {\n      setDateRange({...dateRange, [part]: date});\n    },\n    setTime(part, time) {\n      setTimeRange({...timeRange, [part]: time});\n    },\n    setDateTime(part, dateTime) {\n      setValue({...value, [part]: dateTime});\n    },\n    setDateRange,\n    setTimeRange,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time range was set and not the date range, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !(value?.start && value?.end) && dateRange?.start && dateRange?.end && hasTime) {\n        commitValue(dateRange, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    formatValue(locale, fieldOptions) {\n      if (!value || !value.start || !value.end) {\n        return null;\n      }\n\n      let startTimeZone = 'timeZone' in value.start ? value.start.timeZone : undefined;\n      let startGranularity = props.granularity || (value.start && 'minute' in value.start ? 'minute' : 'day');\n      let endTimeZone = 'timeZone' in value.end ? value.end.timeZone : undefined;\n      let endGranularity = props.granularity || (value.end && 'minute' in value.end ? 'minute' : 'day');\n\n      let startOptions = getFormatOptions(fieldOptions, {\n        granularity: startGranularity,\n        timeZone: startTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: (value.start.calendar.identifier === 'gregory' && value.start.era === 'BC') ||\n          (value.end.calendar.identifier === 'gregory' && value.end.era === 'BC')\n      });\n\n      let startDate = value.start.toDate(startTimeZone || 'UTC');\n      let endDate = value.end.toDate(endTimeZone || 'UTC');\n\n      let startFormatter = new DateFormatter(locale, startOptions);\n      let endFormatter: Intl.DateTimeFormat;\n      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {\n        // Use formatRange, as it results in shorter output when some of the fields\n        // are shared between the start and end dates (e.g. the same month).\n        // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n        try {\n          let parts = startFormatter.formatRangeToParts(startDate, endDate);\n\n          // Find the separator between the start and end date. This is determined\n          // by finding the last shared literal before the end range.\n          let separatorIndex = -1;\n          for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.source === 'shared' && part.type === 'literal') {\n              separatorIndex = i;\n            } else if (part.source === 'endRange') {\n              break;\n            }\n          }\n\n          // Now we can combine the parts into start and end strings.\n          let start = '';\n          let end = '';\n          for (let i = 0; i < parts.length; i++) {\n            if (i < separatorIndex) {\n              start += parts[i].value;\n            } else if (i > separatorIndex) {\n              end += parts[i].value;\n            }\n          }\n\n          return {start, end};\n        } catch (e) {\n          // ignore\n        }\n\n        endFormatter = startFormatter;\n      } else {\n        let endOptions = getFormatOptions(fieldOptions, {\n          granularity: endGranularity,\n          timeZone: endTimeZone,\n          hideTimeZone: props.hideTimeZone,\n          hourCycle: props.hourCycle\n        });\n\n        endFormatter = new DateFormatter(locale, endOptions);\n      }\n\n      return {\n        start: startFormatter.format(startDate),\n        end: endFormatter.format(endDate)\n      };\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFieldState, useDateFieldState} from '.';\nimport {DateValue, TimePickerProps, TimeValue} from '@react-types/datepicker';\nimport {getLocalTimeZone, GregorianCalendar, Time, toCalendarDateTime, today, toTime} from '@internationalized/date';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface TimeFieldStateOptions extends TimePickerProps<TimeValue> {\n  /** The locale to display and edit the value according to. */\n  locale: string\n}\n\n/**\n * Provides state management for a time field component.\n * A time field allows users to enter and edit time values using a keyboard.\n * Each part of a time value is displayed in an individually editable segment.\n */\nexport function useTimeFieldState(props: TimeFieldStateOptions): DateFieldState {\n  let {\n    placeholderValue = new Time(),\n    minValue,\n    maxValue,\n    granularity\n  } = props;\n\n  let [value, setValue] = useControlledState<TimeValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let placeholderDate = useMemo(() => convertValue(placeholderValue), [placeholderValue]);\n  let minDate = useMemo(() => convertValue(minValue, day), [minValue, day]);\n  let maxDate = useMemo(() => convertValue(maxValue, day), [maxValue, day]);\n\n  let dateTime = useMemo(() => value == null ? null : convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(v && 'day' in v ? newValue : newValue && toTime(newValue));\n  };\n\n  return useDateFieldState({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new GregorianCalendar()\n  });\n}\n\nfunction convertValue(value: TimeValue, date: DateValue = today(getLocalTimeZone())) {\n  if (!value) {\n    return null;\n  }\n\n  if ('day' in value) {\n    return value;\n  }\n\n  return toCalendarDateTime(date, value);\n}\n"],"names":[],"version":3,"file":"module.js.map"}