{"mappings":";;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;CAUC,GAED;;AAcO,SAAS,wCAAkC,KAAsB,EAAmB;IACzF,IAAI,QAAQ,CAAA,GAAA,+BAAuB,EAAK;QACtC,GAAG,KAAK;QACR,0BAA0B,IAAI;IAChC;IAEA,IAAI,oBACF,iBAAgB,cAChB,WAAU,EACV,aAAa,mBAAkB,EAChC,GAAG;IAEJ,IAAI,kBAAkB,CAAA,GAAA,aAAK,EAAE;IAC7B,0HAA0H;IAC1H,IAAI,cAAc;IAClB,IAAI,iBAAiB,OAAO,IAAI,CAAC,WAAW,OAAO,CAAC,cAAc;QAChE,cAAc,WAAW,WAAW;QACpC,uEAAuE;QACvE,MAAO,MAAM,YAAY,CAAC,GAAG,CAAC,gBAAgB,gBAAgB,WAAW,UAAU,GACjF,cAAc,WAAW,WAAW,CAAC;QAEvC,oHAAoH;QACpH,IAAI,MAAM,YAAY,CAAC,GAAG,CAAC,gBAAgB,gBAAgB,WAAW,UAAU,IAC9E,cAAc,WAAW,WAAW;QAEtC,uFAAuF;QACvF,iBAAiB,eAAe,CAAC;YAAC;SAAY;IAChD,CAAC;IAED,2JAA2J;IAC3J,IAAI,iBAAiB,UAAU,IAAI,IAAI,IAAK,CAAC,iBAAiB,SAAS,IAAI,gBAAgB,gBAAgB,OAAO,EAChH,iBAAiB,aAAa,CAAC;IAEjC,gBAAgB,OAAO,GAAG;IAE1B,OAAO;QACL,GAAG,KAAK;QACR,YAAY,MAAM,UAAU,IAAI,KAAK;IACvC;AACF;;CDvDC,GAED","sources":["packages/@react-stately/tabs/src/index.ts","packages/@react-stately/tabs/src/useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useTabListState} from './useTabListState';\n\nexport type {TabListProps} from '@react-types/tabs';\nexport type {TabListState} from './useTabListState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useRef} from 'react';\n\n\nexport interface TabListState<T> extends SingleSelectListState<T> {\n  /** Whether the tab list is disabled. */\n  isDisabled: boolean\n}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListProps<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n  let selectedKey = currentSelectedKey;\n  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) {\n      selectedKey = collection.getKeyAfter(selectedKey);\n    }\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) {\n      selectedKey = collection.getFirstKey();\n    }\n    // directly set selection because replace/toggle selection won't consider disabled keys\n    selectionManager.setSelectedKeys([selectedKey]);\n  }\n\n  // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n  if (selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n    selectionManager.setFocusedKey(selectedKey);\n  }\n  lastSelectedKey.current = selectedKey;\n\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}